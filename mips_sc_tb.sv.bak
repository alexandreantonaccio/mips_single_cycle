module mips_sc_tb();

    logic        clk, reset;
    logic [31:0] PC;
    logic [31:0] Instr;
    logic        MemWrite;
    logic [31:0] ALUResult, WriteData;
    logic [31:0] ReadData;

    // Memórias
    logic [31:0] InstrMem[0:255];
    logic [31:0] DataMem[0:1023];  // Expandida para 1KB

    // Inicialização
    initial begin
        // Inicializa memória de instruções
        $readmemb("extended_test.txt", InstrMem);
        
        // Inicializa memória de dados
        DataMem = '{default:0};
        
        // Configura reset
        reset = 1;
        #10;
        reset = 0;
        
        // Executa por tempo suficiente
        #500;
        
        // Verifica resultados
        check_results();
        $finish;
    end

    // Gerador de clock
    always begin
        clk = 0; #5;
        clk = 1; #5;
    end

    // Instância do processador
    bne_cpu dut (
        .clk(clk),
        .reset(reset),
        .PC(PC),
        .Instr(Instr),
        .MemWrite(MemWrite),
        .ALUResult(ALUResult),
        .WriteData(WriteData),
        .ReadData(ReadData)
    );

    // Interface com memória de instruções
    assign Instr = (PC < 1024) ? InstrMem[PC[31:2]] : 0;

    // Interface com memória de dados
    always @(posedge clk) begin
        if (MemWrite && ALUResult < 4096) begin
            DataMem[ALUResult[31:2]] <= WriteData;
            $display("MemWrite: addr=%h, data=%h", ALUResult, WriteData);
        end
    end
    assign ReadData = (ALUResult < 4096) ? DataMem[ALUResult[31:2]] : 0;
    
    // Banco de registradores com acesso direto
    logic [31:0] reg_file [0:31];
    assign reg_file = dut.rf.rf;

    // Função de verificação de resultados
    task check_results;
        begin
            $display("\n=== Verificação Final ===");
            
            // 1. Testes Aritméticos
            $display("\n[1] Testes Aritméticos:");
            check_reg(16, 10, "addi $s0, 10");
            check_reg(17, 7, "addi $s1, 7");
            check_reg(18, 17, "add $s2 = 10+7");
            check_reg(19, 3, "sub $s3 = 10-7");
            
            // 2. Testes Lógicos
            $display("\n[2] Testes Lógicos:");
				  check_reg(20, 32'd2, "and $s4 = 10 & 7");
				  check_reg(21, 32'd15, "or $s5 = 10 | 7");
				  check_reg(22, 32'hFFFFFFF0, "nor $s6 = ~(10|7)");  // Corrigido!
            
            // 3. Testes de Memória
            $display("\n[3] Testes de Memória:");
            check_mem(32'h1000, 17, "sw @0x1000");
            check_mem(32'h1004, 3, "sw @0x1004");
            check_reg(9, 17, "lw $t1");
            check_reg(10, 3, "lw $t2");
            
            // 4. Testes de Controle
            $display("\n[4] Testes de Controle:");
            check_reg(13, 2, "beq taken");
            check_reg(14, 0, "slt $t6 = 10<7?");
            check_reg(15, 1, "slti $t7 = 10<11?");
            
            // 5. Testes de Salto
            $display("\n[5] Testes de Salto:");
            check_reg(23, 32'd42, "jal/jr");
        end
    endtask

    // Tarefas auxiliares
    task check_reg(input int reg_num, input int expected, input string msg);
        if (reg_file[reg_num] !== expected) begin
            $display("FALHA: %s - $%0d = %h (esperado %h)", 
                     msg, reg_num, reg_file[reg_num], expected);
        end
        else begin
            $display("SUCESSO: %s", msg);
        end
    endtask

    task check_mem(input int addr, input int expected, input string msg);
        logic [31:0] val;
		  val = DataMem[addr[31:2]];
        if (val !== expected) begin
            $display("FALHA: %s - Mem[%h] = %h (esperado %h)", 
                     msg, addr, val, expected);
        end
        else begin
            $display("SUCESSO: %s", msg);
        end
    endtask

    // Monitoramento de execução
    always @(posedge clk) begin
        if (!reset) begin
            $display("PC=%h, Instr=%h, $s0=%0d, $s1=%0d, $s2=%0d", 
                     PC, Instr, reg_file[16], reg_file[17], reg_file[18]);
            
            // Detecção de instruções críticas
            case (Instr)
                32'h2010000a: $display("  -- Inicializando $s0=10");
                32'h02119020: $display("  -- ADD: $s2 = $s0 + $s1");
                32'h116c0001: $display("  -- BEQ: $t3 == $t4?");
                32'h0c000014: $display("  -- JAL para func");
                32'h03e00008: $display("  -- JR $ra");
            endcase
        end
    end

endmodule